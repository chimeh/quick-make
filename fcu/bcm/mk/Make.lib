
#
# Make rules/targets for handling libraries

.SECONDARY:: ${BOBJS}

BOBJS_FAST = ${BOBJS}
BOBJS_MAKE_CMD =

ifeq ($(FAST),1)
  ifneq ($(strip $(BOBJS)),)
    BOBJS_FAST =
    BOBJS_ARGS = -j9
    BOBJS_MAKE_CMD = pwd && make LSRUN=$(SDK)/tools/lsrun.pl $(BOBJS_ARGS) ${BOBJS}
  endif
endif

ifeq ($(LINUX_MAKE_SHARED_LIB),1)
LIBSUFFIX=so.${SHAREDLIBVER}

targetlibsoname = ${lib}.${LIBSUFFIX}
targetlibrealname = ${targetlibsoname}
targetlib = ${LIBDIR}/${targetlibrealname}

${targetlib}: ${BOBJS_FAST}
	$(BOBJS_MAKE_CMD)
	$(RM) $@
	$(CC) -shared -Wl,-soname,${targetlibsoname} -o ${targetlib} ${BOBJS} -lc

all:: ${BLDDIR}/.tree ${targetlib}

install:: all

clean::
	$(RM) ${BOBJS}
	$(RM) ${targetlib}
else # LINUX_MAKE_SHARED_LIB != 1
ifeq ($(TOOLS),Borland)

LIBSUFFIX=lib

${LIBDIR}/%.lib: ${BORLAND_BOBJS}
	$(RM) $@
	$(FOREACH) -subdir "$(LIBDIR)" \
		"tlib $@ $(foreach obj, $(BORLAND_LOBJS), +-$(obj))"

else	# !Borland

LIBSUFFIX=a

targetlib = ${LIBDIR}/${lib}.${LIBSUFFIX}

all:: ${BLDDIR}/.tree ${targetlib}

ifdef GENERATE_C_FILES
${LIBDIR}/%.a: ${BOBJS_FAST}
	$(BOBJS_MAKE_CMD)
else
${LIBDIR}/%.a: ${BOBJS_FAST}
	$(BOBJS_MAKE_CMD)
endif
ifdef QUIET
	@$(ECHO) ARLIB library $(notdir $@)
endif
	$Q$(RM) $@
	${Q}cd $(dir $(word 1,${BOBJS}));$(AR) ${ARFLAGS} $@ $(sort $(notdir ${BOBJS}))

ifdef GENERATE_C_FILES
$(targetlib): ${BOBJS_FAST}
	$(BOBJS_MAKE_CMD)
else
$(targetlib): ${BOBJS_FAST}
	$(BOBJS_MAKE_CMD)
endif
ifdef QUIET
	@$(ECHO) ARLIB library $(notdir $@)
endif
	$Q$(RM) $@
	${Q}cd $(dir $(word 1,${BOBJS}));$(AR) ${ARFLAGS} $@ $(sort $(notdir ${BOBJS}))

endif	# !Borland


install:: all

clean::
ifdef QUIET
	@$(ECHO) Cleaning objects for ${LOCALDIR} and ${lib}
endif
	$Q$(RM) ${BOBJS}
	$Q$(RM) ${targetlib}
endif # LINUX_MAKE_SHARED_LIB

distclean:: clean
