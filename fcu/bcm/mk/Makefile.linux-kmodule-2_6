

# Due to the extensive use of driver libraries, the SDK usually builds
# kernel modules from a precompiled object. To avoid various warnings
# and conflicts, the pre-compiled object must be named differently
# from the target module, and the object file itself should be
# appended with "_shipped".

# If a module exports any symbols, then the exporting source file must
# be compiled within the kernel source tree for correct generation of
# module symbol versions. The symbol source file should be passed to
# this Makefile via the MODULE_SYM variable.

MODULE := $(MOD_NAME).o
KMODULE := $(MOD_NAME).ko
PRE_COMPILED_OBJ := obj_$(MOD_NAME).o

obj-m := $(MODULE)
$(MOD_NAME)-y := $(MODULE_SYM) $(PRE_COMPILED_OBJ)


ifeq (,$(CROSS_COMPILE))

ifeq (ppc,$(ARCH))
CROSS_COMPILE := powerpc-wrs-linux-gnu-
endif

ifeq (metrocore_gto-2_6,$(platform))
ifeq (ppc,$(ARCH))
CROSS_COMPILE := powerpc-linux-
override LDFLAGS :=
export LDFLAGS
endif
endif

ifeq (metrocore_gto-2_6,$(platform))
ifeq (powerpc,$(ARCH))
CROSS_COMPILE := powerpc-linux-
override LDFLAGS :=
export LDFLAGS
endif
endif

ifeq (metrocore_xes-2_6,$(platform))
ifeq (ppc,$(ARCH))
CROSS_COMPILE := ppc_4xx-
endif
endif

ifeq (raptor-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (WR_LINUX, $(BUILD_PLATFORM))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif
endif

ifeq (raptor-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (ELDK, $(BUILD_PLATFORM))
CROSS_COMPILE := mips_4KC-
endif
endif
endif



ifeq (jag-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (WR_LINUX, $(BUILD_PLATFORM))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif
endif

ifeq (jag-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (ELDK, $(BUILD_PLATFORM))
CROSS_COMPILE := mips_4KC-
endif
endif
endif



ifeq (robo-bsp-2_6,$(platform))
ifeq (mips,$(ARCH))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif

ifeq (keystone-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (WR_LINUX, $(BUILD_PLATFORM))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif
endif

ifeq (keystone-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (ELDK, $(BUILD_PLATFORM))
CROSS_COMPILE := mips_4KC-
endif
endif
endif


ifeq (keystone_le-2_6,$(platform))
ifeq (mips,$(ARCH))
ifeq (WR_LINUX, $(BUILD_PLATFORM))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif
endif

ifeq (northstar-2_6,$(platform))
ifeq (arm9tools,$(ARM_TOOLCHAINS))
CROSS_COMPILE := arm-brcm-linux-gnueabi-
else
CROSS_COMPILE := arm-unknown-linux-uclibcgnueabi-
endif
endif

ifeq (nsx_wrl-2_6,$(platform))
ifeq (mips,$(ARCH))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif

ifeq (gtx-2_6,$(platform))
ifeq (mips,$(ARCH))
CROSS_COMPILE := mips-wrs-linux-gnu-
endif
endif

ifeq (gto-2_6,$(platform))
ifeq (powerpc,$(ARCH))
ifeq (WR_LINUX, $(BUILD_PLATFORM))
ifeq ($(WRL_GLIBC_SMALL),TRUE)
CROSS_COMPILE := powerpc-wrs-linux-gnu-ppc_e500v2-glibc_small-
else
CROSS_COMPILE := powerpc-wrs-linux-gnu-ppc_e500v2-glibc_std-
endif
endif
endif
endif

ifeq (gto-2_6,$(platform))
ifeq (powerpc,$(ARCH)) 
ifeq (ELDK, $(BUILD_PLATFORM))
CROSS_COMPILE := ppc_85xx-
endif
endif
endif

export CROSS_COMPILE

endif

SAVE_CFLAGS := ${CFLAGS}

include $(SDK)/mk/Make.config

PWD := $(shell pwd)

ifneq ($(ARCH),)
# ELDK does not seem to `automatically' define ARCH where other gccs may
A := ARCH=$(ARCH)
export ARCH
endif

# Standard SDK include path for building source files that export
# kernel symbols.

override EXTRA_CFLAGS = -I${SDK}/header -I${SDK}/app/linuxkern/include

# The precopiled object needs a dummy command file to avoid warnings
# from the Kbuild scripts (modpost stage).
# Kernels before 2.6.17 do not support external module symbols files,
# so we create a dummy to prevent build failures.
	
$(KMODULE):
	rm -f *.o *.ko .*.cmd
	rm -fr .tmp_versions
	ln -s $(LIBDIR)/$(MODULE) $(PRE_COMPILED_OBJ)_shipped
	echo "suppress warning" > .$(PRE_COMPILED_OBJ).cmd
	$(MAKE) -C $(KERNDIR) $(if $(KERN_BUILDDIR),O=$(KERN_BUILDDIR),) CROSS_COMPILE=$(CROSS_COMPILE) M=$(PWD) modules
	if [ ! -f Module.symvers ]; then echo "old kernel (pre-2.6.17)" > Module.symvers; fi
	cp -f $(KMODULE) $(LIBDIR)
	rm -f $(PRE_COMPILED_OBJ)_shipped

EXTRA_CFLAGS = $(CFLAGS)
CFLAGS := ${SAVE_CFLAGS}
